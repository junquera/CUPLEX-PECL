import java_cup.runtime.*;
import java.util.*;
import java.io.*;

parser code {:
	public static void main (String argv[]) throws Exception {
		parser analizador;
		analizador = new parser(new Yylex(new InputStreamReader(System.in)));
		try{
			analizador.parse();
		} catch(SemanticException se){
			System.err.println("Hay un error semántico: " + se.getMessage());
		}
	}
:};

terminal PROGRAM, IS, BEGIN, END, VAR, IS_INTEGER, IS_BOOLEAN, READ, WRITE, SKIP, WHILE, DO, IF, THEN, ELSE, AND, OR, TRUE, FALSE, NOT;

terminal ASIGNACION;

terminal MINOR_EQUAL, MINOR, EQUAL, MAJOR, MAJOR_EQUAL, MINOR_MAJOR;

terminal SUMA, RESTA, MULTIPLICACION, DIVISION;

terminal LPARENT, RPARENT, COMA, SEMI_COLON, COLON;

terminal String IDENTIFIER;
terminal int INTEGER;
terminal boolean BOOLEAN;

non terminal Programa program;
non terminal HashMap<String, Variable> vars;
non terminal HashMap<String, Variable> var;
non terminal HashMap<String, Variable> var_identifier;
non terminal Character type;

non terminal statements;
non terminal statement;

non terminal asign_statement;
non terminal if_statement;
non terminal read_statement;
non terminal write_statement;
non terminal while_statement;
non terminal expr_booleana;
non terminal bool_comparation;

non terminal value;
non terminal booleano;

// Es obligatorio que la definición del programa se haga al principio
start with program;

program ::= PROGRAM IDENTIFIER:i 
			{:
				Programa p = new Programa(i);
			:}
			IS 
				vars:v
				{:
				for(String s: v.keySet())
					System.out.println(s);
				:}
			BEGIN 
				statements
			END			
;

vars ::= var:v
		{:
			HashMap<String, Variable> hm = new HashMap<String, Variable>();
			for(String s: v.keySet()) {
				if(hm.containsKey(s))
					throw new SemanticException("Variable repetida " + s);
				hm.put(s, v.get(s));
			}
			RESULT = hm;
		:}
		| vars:hm var:v 
		{:
			for(String s: v.keySet()){
				if(hm.containsKey(s))
					throw new SemanticException("Variable repetida " + s);
				hm.put(s, v.get(s));
			}
			RESULT = hm;
		:}
;

var ::= VAR var_identifier:v COLON type:t SEMI_COLON
{:
	// Al principio utilizaba ArrayList, pero habría tenido que comprobar que no se repitiesen los nombres
	// ArrayList<Variable> result = new ArrayList<Variable>();
	HashMap<String, Variable> hm = new HashMap<String, Variable>(); 
	for(String variable: v.keySet()){
	
		if(hm.containsKey(variable))
			throw new SemanticException("Variable repetida " + variable);
			
		if(t == 'i')
			hm.put(variable, new Int(v.get(variable).getName(), 0));
		else if(t=='b')
			hm.put(variable, new Bool(v.get(variable).getName(), true));
	}
	RESULT = hm;
:}
;

var_identifier ::= IDENTIFIER:i {: 
		HashMap<String, Variable> hm = new HashMap<String, Variable>(); 	
		hm.put(i, new Variable(i)); 
		RESULT= hm; 
	:} | var_identifier:hm COMA IDENTIFIER:i {: 
		if(hm.containsKey(i))
			throw new SemanticException("Variable repetida " + i);
		hm.put(i, new Variable(i)); 
		RESULT = hm;
	:} 
;

type ::= IS_INTEGER {: RESULT='i'; :} | IS_BOOLEAN {: RESULT='b'; :} 
;

statements ::= statement | statements statement
;

// TODO Definir las sentencias
statement ::= if_statement | read_statement | write_statement | while_statement | asign_statement;

asign_statement ::= IDENTIFIER ASIGNACION value SEMI_COLON;
value ::= expr_booleana | INTEGER | IDENTIFIER;

if_statement ::= IF expr_booleana THEN statements END IF SEMI_COLON | IF expr_booleana THEN statements ELSE statements END IF SEMI_COLON;
read_statement ::= READ IDENTIFIER  SEMI_COLON;
write_statement ::= WRITE IDENTIFIER SEMI_COLON;
while_statement ::= WHILE expr_booleana DO statements END WHILE SEMI_COLON;

expr_booleana ::= 	booleano
				;

comparation ::=  MINOR_EQUAL | MINOR | EQUAL | MAJOR | MAJOR_EQUAL | MINOR_MAJOR;

booleano ::= TRUE | FALSE;
