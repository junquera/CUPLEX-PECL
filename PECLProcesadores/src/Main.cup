import java_cup.runtime.*;
import java.util.*;
import java.io.*;

parser code {:
	public static void main (String argv[]) throws Exception {
		parser analizador;
		analizador = new parser(new Yylex(new InputStreamReader(System.in)));
		analizador.parse();
	}
:};

terminal PROGRAM, IS, BEGIN, END, VAR, IS_INTEGER, IS_BOOLEAN, READ, WRITE, SKIP, WHILE, DO, IF, THEN, ELSE, AND, OR, TRUE, FALSE, NOT;

terminal ASIGNACION;

terminal MINOR_EQUAL, MINOR, EQUAL, MAJOR, MAJOR_EQUAL, MINOR_MAJOR;

terminal SUMA, RESTA, MULTIPLICACION, DIVISION;

terminal LPARENT, RPARENT, COMA, SEMI_COLON, COLON;

terminal String IDENTIFIER;
terminal int INTEGER;
terminal boolean BOOLEAN;

non terminal Programa program;
non terminal vars;
non terminal HashMap<String, Variable> var;
non terminal HashMap<String, Variable> var_identifier;
non terminal Character type;
non terminal statements;
non terminal statement;

// Es obligatorio que la definición del programa se haga al principio
start with program;

program ::= PROGRAM IDENTIFIER:i 
			{:
				Programa p = new Programa(i);
			:}
			IS 
				vars:v
			BEGIN 
				statements
			END			
;

vars ::= var | vars var 
;

var ::= VAR var_identifier:v COLON type:t SEMI_COLON
{:
	// Al principio utilizaba ArrayList, pero habría tenido que comprobar que no se repitiesen los nombres
	// ArrayList<Variable> result = new ArrayList<Variable>();
	HashMap<String, Variable> hm = new HashMap<String, Variable>(); 
	for(Variable variable: v){
		if(t == 'i')
			hm.put(variable.getName(), new Int(variable.getName(), 0));
		else if(t=='b')
			hm.put(variable.getName(), new Bool(variable.getName(), true));
	}
	RESULT = hm;
:}
;

var_identifier ::= IDENTIFIER:i {: 
		HashMap<String, Variable> hm = new HashMap<String, Variable>(); 	
		hm.put(i, new Variable(i)); 
		RESULT= hm; 
	:} | var_identifier:lista COMA IDENTIFIER:i {: 
		hm.put(i, new Variable(i)); 
	:} 
//var_identifier ::= VAR IDENTIFIER:i {: ArrayList<Variable> lista = new ArrayList<Variable>(); lista.add(new Variable(i)); RESULT= lista; :} | var_identifier:lista COMA IDENTIFIER:i {: lista.add(new Variable(i)); RESULT=lista; :} 
;

type ::= IS_INTEGER {: RESULT='i'; :} | IS_BOOLEAN {: RESULT='b'; :} 
;

statements ::= statement | statement statements
;

// TODO Definir las sentencias
statement ::= LPARENT;