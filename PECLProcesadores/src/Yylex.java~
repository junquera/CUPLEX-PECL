/* The following code was generated by JFlex 1.6.1 */

import java_cup.sym;
import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>Main.flex</tt>
 */
class Yylex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 47, 47, 47, 47, 47,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    47,  0,  0,  0,  0,  0,  0,  0, 29, 30, 27, 25, 31, 26,  0, 28, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 21, 32, 23, 22, 24,  0, 
     0, 33, 45, 38, 40, 41, 43, 36,  0, 35,  0,  0, 46,  0, 37, 39, 
     0,  0, 44, 34, 42,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  5,  9,  0, 12, 10, 19,  4, 18,  7,  0, 17, 15,  6, 11,  3, 
     1,  0,  2,  8, 14, 20, 13, 16,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0, 47,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    47,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\17\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\3\0\1\15\2\0"+
    "\1\16\1\0\1\17\1\0\1\20\6\0\1\21\6\0"+
    "\1\22\1\23\1\24\6\0\1\25\4\0\1\26\1\0"+
    "\1\27\1\30\12\0\1\31\1\0\1\32\2\0\1\33"+
    "\1\34\1\35\12\0\1\36\1\37\1\40\1\41\13\0"+
    "\1\42\1\43\1\44\1\0\1\45\1\0\1\46\4\0"+
    "\1\47\1\50";

  private static int [] zzUnpackAction() {
    int [] result = new int[125];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\220\0\300\0\360\0\u0120\0\u0150"+
    "\0\u0180\0\u01b0\0\u01e0\0\u0210\0\u0240\0\u0270\0\u02a0\0\u02d0"+
    "\0\u02d0\0\u0300\0\u0330\0\u02d0\0\u02d0\0\u02d0\0\u02d0\0\u02d0"+
    "\0\u02d0\0\u02d0\0\u02d0\0\u0360\0\u0390\0\u03c0\0\u02d0\0\u03f0"+
    "\0\u0420\0\u02d0\0\u0450\0\u02d0\0\u0480\0\u02d0\0\u04b0\0\u04e0"+
    "\0\u0510\0\u0540\0\u0570\0\u05a0\0\u02d0\0\u05d0\0\u0600\0\u0630"+
    "\0\u0660\0\u0690\0\u06c0\0\u02d0\0\u02d0\0\u02d0\0\u06f0\0\u0720"+
    "\0\u0750\0\u0780\0\u07b0\0\u07e0\0\u02d0\0\u0810\0\u0840\0\u0870"+
    "\0\u08a0\0\u02d0\0\u08d0\0\u02d0\0\u02d0\0\u0900\0\u0930\0\u0960"+
    "\0\u0990\0\u09c0\0\u09f0\0\u0a20\0\u0a50\0\u0a80\0\u0ab0\0\u02d0"+
    "\0\u0ae0\0\u02d0\0\u0b10\0\u0b40\0\u02d0\0\u02d0\0\u02d0\0\u0b70"+
    "\0\u0ba0\0\u0bd0\0\u0c00\0\u0c30\0\u0c60\0\u0c90\0\u0cc0\0\u0cf0"+
    "\0\u0d20\0\u02d0\0\u02d0\0\u02d0\0\u02d0\0\u0d50\0\u0d80\0\u0db0"+
    "\0\u0de0\0\u0e10\0\u0e40\0\u0e70\0\u0ea0\0\u0ed0\0\u0f00\0\u0f30"+
    "\0\u02d0\0\u02d0\0\u02d0\0\u0f60\0\u02d0\0\u0f90\0\u02d0\0\u0fc0"+
    "\0\u0ff0\0\u1020\0\u1050\0\u02d0\0\u02d0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[125];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\2\1\3\1\4\1\0\1\5\1\0\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\0"+
    "\1\16\2\0\1\17\1\0\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\0\1\35\11\0\1\36\1\0\1\37\2\0"+
    "\1\40\67\0\1\41\47\0\1\42\70\0\1\43\54\0"+
    "\1\44\2\0\1\45\7\0\1\46\55\0\1\47\41\0"+
    "\1\50\6\0\1\51\60\0\1\52\3\0\1\53\43\0"+
    "\1\54\57\0\1\55\61\0\1\56\54\0\1\57\17\0"+
    "\1\60\37\0\1\61\17\0\1\62\42\0\1\63\160\0"+
    "\1\64\1\0\1\65\55\0\1\66\73\0\1\67\62\0"+
    "\1\70\2\0\1\71\56\0\1\72\13\0\1\73\61\0"+
    "\1\74\66\0\1\75\61\0\1\76\50\0\1\77\53\0"+
    "\1\100\60\0\1\101\67\0\1\102\53\0\1\103\65\0"+
    "\1\104\43\0\1\105\101\0\1\106\45\0\1\107\54\0"+
    "\1\110\57\0\1\111\67\0\1\112\103\0\1\113\66\0"+
    "\1\114\56\0\1\115\55\0\1\116\14\0\1\117\67\0"+
    "\1\120\55\0\1\121\46\0\1\122\75\0\1\123\47\0"+
    "\1\124\62\0\1\125\57\0\1\126\60\0\1\127\62\0"+
    "\1\130\60\0\1\131\50\0\1\132\113\0\1\133\64\0"+
    "\1\134\53\0\1\135\70\0\1\136\3\0\1\137\61\0"+
    "\1\140\65\0\1\141\60\0\1\142\56\0\1\143\57\0"+
    "\1\144\57\0\1\145\112\0\1\146\56\0\1\147\65\0"+
    "\1\150\56\0\1\151\13\0\1\152\64\0\1\153\52\0"+
    "\1\154\113\0\1\155\67\0\1\156\51\0\1\157\55\0"+
    "\1\160\24\0\1\161\53\0\1\162\70\0\1\163\112\0"+
    "\1\164\65\0\1\165\56\0\1\166\51\0\1\167\55\0"+
    "\1\170\57\0\1\171\63\0\1\172\61\0\1\173\53\0"+
    "\1\174\66\0\1\175\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4224];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\17\0\2\11\2\1\10\11\3\0\1\11\2\0\1\11"+
    "\1\0\1\11\1\0\1\11\6\0\1\11\6\0\3\11"+
    "\6\0\1\11\4\0\1\11\1\0\2\11\12\0\1\11"+
    "\1\0\1\11\2\0\3\11\12\0\4\11\13\0\3\11"+
    "\1\0\1\11\1\0\1\11\4\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[125];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	// Java code


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return new Symbol (sym.COLON);
            }
          case 41: break;
          case 2: 
            { return new Symbol(sym.EQUAL;)
            }
          case 42: break;
          case 3: 
            { return new Symbol(sym.MINOR;)
            }
          case 43: break;
          case 4: 
            { return new Symbol(sym.MAJOR;)
            }
          case 44: break;
          case 5: 
            { return new Symbol (sym.SUMA);
            }
          case 45: break;
          case 6: 
            { return new Symbol (sym.RESTA);
            }
          case 46: break;
          case 7: 
            { return new Symbol (sym.MULTIPLICACION);
            }
          case 47: break;
          case 8: 
            { return new Symbol (sym.DIVISION);
            }
          case 48: break;
          case 9: 
            { return new Symbol (sym.LPARENT);
            }
          case 49: break;
          case 10: 
            { return new Symbol (sym.RPARENT);
            }
          case 50: break;
          case 11: 
            { return new Symbol (sym.COMA);
            }
          case 51: break;
          case 12: 
            { return new Symbol (sym.SEMI_COLON);
            }
          case 52: break;
          case 13: 
            { 
            }
          case 53: break;
          case 14: 
            { return new Symbol(sym.OR;)
            }
          case 54: break;
          case 15: 
            { return new Symbol(sym.IS;)
            }
          case 55: break;
          case 16: 
            { return new Symbol(sym.IF;)
            }
          case 56: break;
          case 17: 
            { return new Symbol(sym.DO;)
            }
          case 57: break;
          case 18: 
            { return new Symbol(sym.MINOR_EQUAL;)
            }
          case 58: break;
          case 19: 
            { return new Symbol(sym.MINOR_MAJOR;)
            }
          case 59: break;
          case 20: 
            { return new Symbol(sym.MAJOR_EQUAL;)
            }
          case 60: break;
          case 21: 
            { return new Symbol(sym.AND;)
            }
          case 61: break;
          case 22: 
            { return new Symbol(sym.END;)
            }
          case 62: break;
          case 23: 
            { return new Symbol(sym.NOT;)
            }
          case 63: break;
          case 24: 
            { return new Symbol(sym.VAR;)
            }
          case 64: break;
          case 25: 
            { return new Symbol(sym.READ;)
            }
          case 65: break;
          case 26: 
            { return new Symbol(sym.SKIP;)
            }
          case 66: break;
          case 27: 
            { return new Symbol(sym.ELSE;)
            }
          case 67: break;
          case 28: 
            { return new Symbol(sym.TRUE;)
            }
          case 68: break;
          case 29: 
            { return new Symbol(sym.THEN;)
            }
          case 69: break;
          case 30: 
            { return new Symbol(sym.BEGIN;)
            }
          case 70: break;
          case 31: 
            { return new Symbol(sym.WRITE;)
            }
          case 71: break;
          case 32: 
            { return new Symbol(sym.WHILE;)
            }
          case 72: break;
          case 33: 
            { return new Symbol(sym.FALSE;)
            }
          case 73: break;
          case 34: 
            { return new Symbol(sym.PROGRAM;)
            }
          case 74: break;
          case 35: 
            { return new Symbol(sym.INTEGER;)
            }
          case 75: break;
          case 36: 
            { return new Symbol(sym.BOOLEAN;)
            }
          case 76: break;
          case 37: 
            { return new Symbol(sym.INTEGER, new Integer(yytext());)
            }
          case 77: break;
          case 38: 
            { return new Symbol(sym.BOOLEAN, new Boolean(yytext());
            }
          case 78: break;
          case 39: 
            { return new Symbol (sym.ASIGNACION);
            }
          case 79: break;
          case 40: 
            { return new Symbol (sym.IDENTIFIER, yytext());
            }
          case 80: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
