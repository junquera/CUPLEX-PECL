import java_cup.runtime.*;
import java.util.HashMap;
import semantic.*;
import java.util.ArrayList;

parser code {:

    public SymbolTable tabla = new SymbolTable();
    public ArrayList<SyntaxError> errors = new ArrayList<>();

    public void report_error(String message, Object info) {
        if(info instanceof BASICSymbol) {
            BASICSymbol s = ((BASICSymbol) info);
            errors.add(new SyntaxError(message, s.getLine(), s.getColumn()));
        }

    }

    public void report_fatal_error(String message, Object info) {
        System.err.println("!! FATAL ERROR !!");
        report_error(message, info);
        System.exit(1);
    }
:};

non terminal var, var_num_simple, var_num_suscrita, var_cadena;

non terminal literal, literal_num,
             basic_expression, pow_expression, multiplicative_expression, additive_expression, conditional_expression,
             declaracion_dim;

non terminal Funcion funcion_suministrada, funcion;


non terminal Programa programa;
non terminal Linea[] lineas;
non terminal Linea linea;
non terminal Sentencia sentencia, asignacion, goto, if_then, gosub, on_goto, stop, for_to, next, print, input, def_funcion_nueva, data, read, dim;

terminal POW, MUL, DIV, SUM, SUB, EQU, COMA, PCOMA,
         LT, LE, GE, GT, NEQ, DATA, DEF, DIM, END, FOR, GO,
         GOSUB, GOTO, IF, INPUT, LET, NEXT, ON, PRINT, RANDOMIZE,
         READ, REM, RESTORE, RETURN, STEP, STOP, THEN, TO, ABS, ATN, INT,
         COS, EXP, LOG, RND, SGN, SIN, SQR, TAN, FN, VAR_NUM, VAR_TXT,
         LPAR, RPAR, ERROR, CRLF;

terminal Integer INTEGER;
terminal Float FLOAT;
terminal String STRING;

// TODO Hay que ver si esto se puede poner (segun PECL)
start with programa;

programa ::= lineas;
// TODO \n?
lineas ::= linea | lineas linea;

linea ::= INTEGER:i sentencia CRLF {:
              System.out.println(i);
          :};

sentencia ::=  asignacion | goto | if_then | gosub |
               on_goto| stop| for_to | next | print | input | data |
               def_funcion_nueva | read | dim | REM | RANDOMIZE | RESTORE | END ;


/** ES1.- Variables **/
var ::= var_num_simple |
        var_cadena |
        var_num_suscrita
        ;

var_num_simple ::= VAR_NUM;
var_num_suscrita ::= VAR_NUM LPAR literal_num RPAR | VAR_NUM LPAR literal_num COMA literal_num RPAR;
var_cadena ::= VAR_TXT:v;

/** ES2.- Expresiones numéricas **/

literal ::= literal_num
            | STRING
            ;

literal_num ::= INTEGER | FLOAT;

basic_expression ::= literal
                       | var
                       | LPAR basic_expression RPAR
                       ;

pow_expression ::= basic_expression
                   | pow_expression POW basic_expression
                   ;

multiplicative_expression ::=
		pow_expression
	|	multiplicative_expression MUL basic_expression
	|	multiplicative_expression DIV basic_expression
	;

additive_expression ::=
		multiplicative_expression
	|	additive_expression SUM multiplicative_expression
	|	additive_expression SUB multiplicative_expression
	;

/** ES3.- Funciones suministradas**/

funcion_suministrada ::= ABS LPAR funcion_suministrada RPAR
                         | ATN LPAR funcion_suministrada RPAR
                         | COS LPAR funcion_suministrada RPAR
                         | EXP LPAR funcion_suministrada RPAR
                         | INT LPAR funcion_suministrada RPAR
                         | LOG LPAR funcion_suministrada RPAR
                         | SGN LPAR funcion_suministrada RPAR
                         | SIN LPAR funcion_suministrada RPAR
                         | SQR LPAR funcion_suministrada RPAR
                         | TAN LPAR funcion_suministrada RPAR
                         | RND
                         | additive_expression
                         ;


/** ES4.- Nuevas funciones **/

def_funcion_nueva ::= DEF FN VAR_NUM EQU additive_expression |
                  DEF FN VAR_NUM LPAR VAR_NUM RPAR EQU additive_expression
                  ;

funcion ::= FN VAR_NUM | FN VAR_NUM LPAR funcion RPAR | funcion_suministrada;

// TODO Cómo hacer funcion + X ?

/** ES5.- Asignacion **/

asignacion ::= LET var EQU funcion ;

/** ES6.- Comparacion **/

conditional_expression ::=  conditional_expression LT funcion |
                            conditional_expression LE funcion |
                            conditional_expression GE funcion |
                            conditional_expression GT funcion |
                            conditional_expression EQU funcion |
                            conditional_expression NEQ funcion |
                            funcion
                            ;

/** ES7.- Sentencias de control**/

goto ::= GOTO INT;

// TODO conditional_expression == exp1 comparación exp2
if_then ::= IF conditional_expression THEN INTEGER |
            IF conditional_expression THEN error:e {:
                parser.report_error("SyntaxError en if: IF c THEN (numero de linea)", e);
            :} |
            IF error:e {:
                parser.report_error("SyntaxError en if: ", e);
            :};

gosub ::= GOSUB INTEGER lineas RETURN;

on_goto ::= ON conditional_expression GOTO |
            on_goto COMA INTEGER;

stop ::= STOP; // TRATAR COMO GOTO END

/** ES8.- For-To **/
for_to ::= FOR var EQU funcion TO funcion |
           FOR var EQU funcion TO funcion STEP funcion
           ;

next ::= NEXT var;


/** ES9.- PrINTEGER */

print ::= PRINT funcion |
          print PCOMA funcion |
          print COMA funcion
          ;


/** ES10.- Input **/

input ::= INPUT var |
          input COMA var |
          INPUT error:e {:
            parser.report_error("SyntaxError en input: ", e);
          :}
          ;

/** ES11.- Data**/
data ::= DATA funcion |
         data COMA funcion |
         DATA error:e {:
            parser.report_error("SyntaxError en data: ", e);
         :}
         ;


/** ES12.- Read **/

read ::= READ var |
         read COMA var |
         READ error:e {:
             parser.report_error("SyntaxError en read: ", e);
         :}
         ;


/** ES13.- Dim **/
// TODO Revisar esto
declaracion_dim ::= VAR_NUM LPAR INTEGER RPAR |
                    VAR_NUM LPAR INTEGER COMA INTEGER RPAR |
                    VAR_NUM LPAR error:e RPAR {:
                        parser.report_error("Hay que introducir un entero; o dos separados por comas (','): ", e);
                    :};

dim ::= DIM declaracion_dim
        | dim COMA declaracion_dim
        ;


/** ES14.- Rem **/
/** ES15.- Randomize **/

