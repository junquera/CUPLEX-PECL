import java_cup.runtime.*;
import java.util.HashMap;
import semantic.*;
import java.util.List;
import java.util.ArrayList;

parser code {:

    public SymbolTable tabla = new SymbolTable();
    public ArrayList<SyntaxError> errors = new ArrayList<>();

    public void report_error(String message, Object info) {
        if(info instanceof BASICSymbol) {
            BASICSymbol s = ((BASICSymbol) info);
            report_error(message, s.getLine(), s.getColumn());
        }
    }

    public void report_error(String message, int line, int column) {
        errors.add(new SyntaxError(message, line, column));
    }
    public void report_error(String message) {
        int line = ((BASICLexer) getScanner()).getLine();
        errors.add(new SyntaxError(message, line, -1));
    }

    public void report_fatal_error(String message, Object info) {
        System.err.println("!! FATAL ERROR !!");

        if(info instanceof BASICSymbol) {
            BASICSymbol s = ((BASICSymbol) info);
            System.err.println(message + " (line " + s.getLine() + ", column " + s.getColumn() + ")");
        }

        System.exit(1);
    }
:};

non terminal Node var, var_num_simple, var_num_suscrita, var_cadena;

non terminal Node literal, literal_num;

non terminal Node basic_expression, pow_expression, multiplicative_expression,
                           additive_expression, conditional_expression;

non terminal Node declaracion_dim;

non terminal Node funcion_suministrada, funcion;


non terminal Node.Programa programa;
non terminal List<Node.Linea> lineas;
non terminal Node.Linea linea;
non terminal Node sentencia, asignacion, goto, if_then, gosub, on_goto, for_to, next, print, input, def_funcion_nueva, data, read, dim;

terminal POW, MUL, DIV, SUM, SUB, EQU, COMA, PCOMA,
         LT, LE, GE, GT, NEQ, DATA, DEF, DIM, END, FOR, GO,
         GOSUB, GOTO, IF, INPUT, LET, NEXT, ON, PRINT, RANDOMIZE,
         READ, REM, RESTORE, RETURN, STEP, STOP, THEN, TO, ABS, ATN, INT,
         COS, EXP, LOG, RND, SGN, SIN, SQR, TAN, FN, LPAR, RPAR, ERROR, CRLF;

terminal String VAR_NUM, VAR_TXT;

terminal Integer INTEGER;
terminal Float FLOAT;
terminal String STRING;

// TODO Hay que ver si esto se puede poner (segun PECL)
start with programa;

programa ::= lineas:ls {:
    RESULT = new Node.Programa(ls, parser.tabla);
:};

lineas ::=  linea:l {:
                List<Node.Linea> lineas = new ArrayList<>();
                Node.Linea linea = (Node.Linea) l;
                lineas.add(linea);
                RESULT = lineas;
             :} |
             lineas:ls linea:l {:
                List<Node.Linea> lineas = ls;
                Node.Linea linea = (Node.Linea) l;
                lineas.add(linea);
                RESULT = lineas;
            :};

linea ::= INTEGER:i sentencia:s CRLF {:
              Node.Linea nl = new Node.Linea(i);
              nl.addSonNode(s);
              RESULT = nl;
          :};

sentencia ::=   asignacion:s {:
                    RESULT = s;
                :} |
                goto:s {:
                    RESULT = s;
                :} |
                if_then:s {:
                    RESULT = s;
                :} |
                gosub:s {:
                    RESULT = s;
                :} |
                on_goto:s {:
                    RESULT = s;
                :} |
                for_to:s {:
                    RESULT = s;
                :} |
                next:s {:
                    RESULT = s;
                :} |
                print:s {:
                    RESULT = s;
                :} |
                input:s {:
                    RESULT = s;
                :} |
                data:s {:
                    RESULT = s;
                :} |
                def_funcion_nueva:s {:
                    RESULT = s;
                :} |
                read:s {:
                    RESULT = s;
                :} |
                dim:s {:
                    RESULT = s;
                :} |
                REM {:
                    RESULT = new Node.Rem();
                :} |
                RANDOMIZE {:
                    RESULT = new Node.Randomize();
                :} |
                RETURN {:
                    RESULT = new Node.Return();
                :} |
                RESTORE {:
                    RESULT = new Node.Restore();
                :} |
                END {:
                    RESULT = new Node.End();
                :} |
                STOP {:
                    RESULT = new Node.Stop();
                :} |
                ERROR:e {:
                    parser.report_error("Error léxico", e);
                :};


/** ES1.- Variables **/
var ::= var_num_simple:v {: RESULT = v; :} |
        var_cadena:v {: RESULT = v; :} |
        var_num_suscrita:v {: RESULT = v; :}
        ;

var_num_simple ::= VAR_NUM:v {:
                        Node.Variable va = new Node.Variable(v, Node.Variable.NUMERIC);
                        RESULT = va;
                    :};

// TODO VariableDim
var_num_suscrita ::= VAR_NUM:v LPAR literal_num:v1 RPAR {:
                            Node.Variable va = new Node.Variable(v, Node.Variable.NUMERIC);
                            va.addSonNode(v1);
                            RESULT = va;
                    :} |
                    VAR_NUM:v LPAR literal_num:v1 COMA literal_num:v2 RPAR {:
                              Node.Variable va = new Node.Variable(v, Node.Variable.NUMERIC);
                              va.addSonNode(v1);
                              va.addSonNode(v2);
                              RESULT = va;
                      :};

var_cadena ::= VAR_TXT:v {:
                    Node.Variable va = new Node.Variable(v, Node.Variable.STRING);
                    RESULT = va;
                :};

/** ES2.- Expresiones numéricas **/

literal ::= literal_num:v {:
                RESULT = v;
            :} |
            STRING:v {:
                RESULT = new Node.Literal(v, Node.Variable.STRING);
            :}
            ;

literal_num ::= INTEGER:v {:
                     RESULT = new Node.Literal(v, Node.Variable.NUMERIC);
                :}| FLOAT:v {:
                    RESULT = new Node.Literal(v, Node.Variable.NUMERIC);
                 :};

basic_expression ::= literal:e {:
                        RESULT = e;
                   :} |
                    var:e {:
                          RESULT = e;
                     :};

pow_expression ::= basic_expression:e {:
                        RESULT = e;
                   :} |
                   pow_expression:e1 POW basic_expression:e2 {:
                      Node.BinExpression be = new Node.BinExpression(Node.BinExpression.POW);
                      be.addSonNode(e1);
                      be.addSonNode(e2);
                      RESULT = be;
                   :};

multiplicative_expression ::=
		pow_expression:e {:
              RESULT = e;
         :} |
		multiplicative_expression:e1 DIV basic_expression:e2 {:
              Node.BinExpression be = new Node.BinExpression(Node.BinExpression.DIV);
              be.addSonNode(e1);
              be.addSonNode(e2);
              RESULT = be;
       :} |
       multiplicative_expression:e1 MUL basic_expression:e2 {:
              Node.BinExpression be = new Node.BinExpression(Node.BinExpression.MUL);
              be.addSonNode(e1);
              be.addSonNode(e2);
              RESULT = be;
       :};

additive_expression ::= multiplicative_expression:e {:
                             RESULT = e;
                        :} |
                        LPAR additive_expression:e RPAR {:
                           RESULT = e;
                        :} |
                        additive_expression:e1 SUM multiplicative_expression:e2 {:
                              Node.BinExpression be = new Node.BinExpression(Node.BinExpression.SUM);
                              be.addSonNode(e1);
                              be.addSonNode(e2);
                              RESULT = be;
                        :} |
                        additive_expression:e1 SUB multiplicative_expression:e2 {:
                              Node.BinExpression be = new Node.BinExpression(Node.BinExpression.SUB);
                              be.addSonNode(e1);
                              be.addSonNode(e2);
                              RESULT = be;
                        :};

/** ES3.- Funciones suministradas**/

funcion_suministrada ::= ABS LPAR funcion_suministrada:f RPAR {:
                            Node.Funcion nf = new Node.Funcion("ABS");
                            nf.addSonNode(f);
                            RESULT = nf;
                        :} |
                        ATN LPAR funcion_suministrada:f RPAR {:
                            Node.Funcion nf = new Node.Funcion("ATN");
                            nf.addSonNode(f);
                            RESULT = nf;
                         :} |
                         COS LPAR funcion_suministrada:f RPAR {:
                            Node.Funcion nf = new Node.Funcion("COS");
                            nf.addSonNode(f);
                            RESULT = nf;
                         :} |
                         EXP LPAR funcion_suministrada:f RPAR {:
                            Node.Funcion nf = new Node.Funcion("EXP");
                            nf.addSonNode(f);
                            RESULT = nf;
                         :} |
                         INT LPAR funcion_suministrada:f RPAR {:
                            Node.Funcion nf = new Node.Funcion("INT");
                            nf.addSonNode(f);
                            RESULT = nf;
                         :} |
                         LOG LPAR funcion_suministrada:f RPAR {:
                            Node.Funcion nf = new Node.Funcion("LOG");
                            nf.addSonNode(f);
                            RESULT = nf;
                         :} |
                         SGN LPAR funcion_suministrada:f RPAR {:
                            Node.Funcion nf = new Node.Funcion("SGN");
                            nf.addSonNode(f);
                            RESULT = nf;
                         :} |
                         SIN LPAR funcion_suministrada:f RPAR {:
                            Node.Funcion nf = new Node.Funcion("SIN");
                            nf.addSonNode(f);
                            RESULT = nf;
                         :} |
                         SQR LPAR funcion_suministrada:f RPAR {:
                            Node.Funcion nf = new Node.Funcion("SQR");
                            nf.addSonNode(f);
                            RESULT = nf;
                         :} |
                         TAN LPAR funcion_suministrada:f RPAR {:
                            Node.Funcion nf = new Node.Funcion("TAN");
                            nf.addSonNode(f);
                            RESULT = nf;
                         :} |
                         RND {:
                            Node.Funcion nf = new Node.Funcion("RND");
                            RESULT = nf;
                        :}  |
                         additive_expression:e {:
                            RESULT = e;
                         :}
                         ;


/** ES4.- Nuevas funciones **/

def_funcion_nueva ::= DEF FN:f VAR_NUM:v EQU funcion:fn {:
        Node.DefFuncion ndf = new Node.DefFuncion();
        Node.Funcion nf = new Node.Funcion((String) f + (String) v, true);
        ndf.addSonNode(nf);
        ndf.addSonNode(fn);

        parser.tabla.add(((Node.Funcion) nf).getValue(), nf);

        RESULT = ndf;
    :} |
    DEF FN:f VAR_NUM:v LPAR funcion:fn1 RPAR EQU funcion:fn2 {:
        Node.DefFuncion ndf = new Node.DefFuncion();
        Node.Funcion nf = new Node.Funcion((String) f + (String) v, true);
        nf.addSonNode(fn1);
        ndf.addSonNode(nf);
        ndf.addSonNode(fn2);

        parser.tabla.add(((Node.Funcion) nf).getValue(), nf);

        RESULT = ndf;
    :}
;

// TODO Cómo hacer funcion + X ?
funcion ::= FN:f VAR_NUM:v {:
                Node.Funcion nf = new Node.Funcion((String) f + (String) v, true);
                RESULT = nf;
            :} | FN:f VAR_NUM:v LPAR funcion:fe RPAR {:
                Node.Funcion nf = new Node.Funcion((String) f + (String) v, true);
                nf.addSonNode(fe);
                RESULT = nf;
            :}  | funcion_suministrada:fs {:
                RESULT = fs;
            :};


/** ES5.- Asignacion **/

asignacion ::= LET var:v EQU funcion:f {:
    Node.Asignacion na = new Node.Asignacion();
    if(v.getType() != f.getType()){
        parser.report_error("Las variables asignadas tienen que ser del mismo tipo");
    }
    na.addSonNode(v);
    na.addSonNode(f);
    parser.tabla.add(((Node.Variable) v).getName(), f);
    RESULT = na;
 :};

/** ES6.- Comparacion **/
conditional_expression ::=  conditional_expression:e1 LT funcion:e2 {:
                                   Node.CondExpression be = new Node.CondExpression(Node.CondExpression.LT);
                                   be.addSonNode(e1);
                                   be.addSonNode(e2);
                                   RESULT = be;
                            :} |
                            conditional_expression:e1 LE funcion:e2 {:
                                    Node.CondExpression be = new Node.CondExpression(Node.CondExpression.LE);
                                    be.addSonNode(e1);
                                    be.addSonNode(e2);
                                    RESULT = be;
                             :} |
                            conditional_expression:e1 GE funcion:e2  {:
                                  Node.CondExpression be = new Node.CondExpression(Node.CondExpression.GE);
                                  be.addSonNode(e1);
                                  be.addSonNode(e2);
                                  RESULT = be;
                           :} |
                            conditional_expression:e1 GT funcion:e2  {:
                                  Node.CondExpression be = new Node.CondExpression(Node.CondExpression.GT);
                                  be.addSonNode(e1);
                                  be.addSonNode(e2);
                                  RESULT = be;
                           :} |
                            conditional_expression:e1 EQU funcion:e2 {:
                                  Node.CondExpression be = new Node.CondExpression(Node.CondExpression.EQU);
                                  be.addSonNode(e1);
                                  be.addSonNode(e2);
                                  RESULT = be;
                           :} |
                            conditional_expression:e1 NEQ funcion:e2  {:
                                   Node.CondExpression be = new Node.CondExpression(Node.CondExpression.NEQ);
                                   be.addSonNode(e1);
                                   be.addSonNode(e2);
                                   RESULT = be;
                            :} |
                            funcion:f {:
                                RESULT = f;
                            :}
                            ;

/** ES7.- Sentencias de control**/

goto ::= GOTO literal_num:l {:
    Node.GoTo ngt = new Node.GoTo();
    ngt.addSonNode(l);
    RESULT = ngt;
:};

// TODO conditional_expression == exp1 comparación exp2
if_then ::= IF conditional_expression:ce THEN literal_num:l {:
                Node.IfThen nit = new Node.IfThen();
                nit.addSonNode(ce);
                l.castToInt();
                nit.addSonNode(l);
                RESULT = nit;
            :}|
            IF conditional_expression THEN error:e {:
                parser.report_error("SyntaxError en if: IF c THEN (numero de linea)");
            :} |
            IF error:e {:
                parser.report_error("SyntaxError en if: ");
            :};

gosub ::= GOSUB literal_num:l {:
            Node.GoSub ngs = new Node.GoSub();
            l.castToInt();
            ngs.addSonNode(l);
            RESULT = ngs;
        :};

on_goto ::= ON conditional_expression:ce GOTO {:
                Node.OnGoTo ogt = new Node.OnGoTo();
                ogt.addSonNode(ce);
                RESULT = ogt;
            :} |
            on_goto:ogt COMA literal_num:l {:
                ogt.addSonNode(l);
                RESULT = ogt;
            :};

/** ES8.- For-To **/
for_to ::= FOR var:v EQU funcion:f1 TO funcion:f2 {:
            Node.ForTo nft = new Node.ForTo();
            nft.addSonNode(v);
            nft.addSonNode(f1);
            nft.addSonNode(f2);
            RESULT = nft;
           :} |
           FOR var:v EQU funcion:f1 TO funcion:f2 STEP funcion:f3 {:
              Node.ForTo nft = new Node.ForTo();
              nft.addSonNode(v);
              nft.addSonNode(f1);
              nft.addSonNode(f2);
              nft.addSonNode(f3);
              RESULT = nft;
         :}
           ;

next ::= NEXT var:v {:
    Node.Next nn = new Node.Next();
    nn.addSonNode(v);
    RESULT = nn;
:};


/** ES9.- PrINTEGER */

print ::= PRINT funcion:f {:
            Node.Print np = new Node.Print();
            np.addSonNode(f);
            RESULT = np;
          :} |
          print:p PCOMA funcion:f {:
            Node.Literal nl = new Node.Literal("SPACE", Node.Literal.STRING);
            p.addSonNode(nl);
            p.addSonNode(f);
            RESULT = p;
          :} |
          print:p COMA funcion:f {:
            Node.Literal nl = new Node.Literal("TAB", Node.Literal.STRING);
            p.addSonNode(nl);
            p.addSonNode(f);
            RESULT = p;
          :}
          ;


/** ES10.- Input **/

input ::= INPUT var:v {:
            Node.Input ni = new Node.Input();
            ni.addSonNode(v);
            RESULT = ni;
          :} |
          input:i COMA var:v {:
            i.addSonNode(v);
            RESULT = i;
          :} |
          INPUT error:e {:
            parser.report_error("SyntaxError en input: ");
          :}
          ;

/** ES11.- Data**/
data ::= DATA funcion:f {:
            Node.Data nd = new Node.Data();
            nd.addSonNode(f);
            RESULT = nd;
         :} |
         data:nd COMA funcion:f {:
            nd.addSonNode(f);
            RESULT = nd;
         :} |
         DATA error:e {:
            parser.report_error("SyntaxError en data: ");
         :}
         ;


/** ES12.- Read **/

read ::= READ var:v {:
            Node.Read nr = new Node.Read();
            nr.addSonNode(v);
            RESULT = nr;
         :} |
         read:nr COMA var:v {:
            nr.addSonNode(v);
            RESULT = nr;
         :} |
         READ error:e {:
             parser.report_error("SyntaxError en read: ");
         :}
         ;


/** ES13.- Dim **/
// TODO Revisar esto
declaracion_dim ::= VAR_NUM LPAR literal_num:l RPAR {:
                        Node.DeclDim ndd = new Node.DeclDim();
                        ndd.addSonNode(l);
                        RESULT = ndd;
                    :} |
                    VAR_NUM LPAR literal_num:l1 COMA literal_num:l2 RPAR {:
                        Node.DeclDim ndd = new Node.DeclDim();
                        ndd.addSonNode(l1);
                        ndd.addSonNode(l2);
                        RESULT = ndd;
                    :}  |
                    VAR_NUM LPAR error:e RPAR {:
                        parser.report_error("Hay que introducir un entero; o dos separados por comas (','): ");
                    :};

dim ::= DIM declaracion_dim:dd {:
            Node.Dim nd = new Node.Dim();
            nd.addSonNode(dd);
            RESULT = nd;
        :} |
        dim:nd COMA declaracion_dim:dd {:
            nd.addSonNode(dd);
            RESULT = nd;
        :}
        ;


/** ES14.- Rem **/
/** ES15.- Randomize **/

