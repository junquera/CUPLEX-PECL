
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Nov 26 12:30:23 CET 2017
//----------------------------------------------------

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Nov 26 12:30:23 CET 2017
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\113\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\004\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\005\003\000\002\006\003\000\002\006\006" +
    "\000\002\007\003\000\002\007\005\000\002\010\005\000" +
    "\002\010\005\000\002\010\005\000\002\010\005\000\002" +
    "\010\005\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\012\006\000\002\012\006\000\002\012\006" +
    "\000\002\012\006\000\002\012\006\000\002\012\006\000" +
    "\002\012\006\000\002\012\006\000\002\012\006\000\002" +
    "\012\006\000\002\012\006\000\002\013\007\000\002\013" +
    "\012\000\002\014\006\000\002\014\006\000\002\015\005" +
    "\000\002\015\005\000\002\015\005\000\002\015\005\000" +
    "\002\015\005\000\002\015\005\000\002\015\003\000\002" +
    "\016\004\000\002\016\006\000\002\016\006\000\002\016" +
    "\006\000\002\016\003\000\002\016\003\000\002\017\015" +
    "\000\002\017\013\000\002\020\004\000\002\020\005\000" +
    "\002\020\005\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\022\004\000\002\022\005\000\002\023" +
    "\005\000\002\023\004\000\002\024\005\000\002\024\004" +
    "\000\002\025\007\000\002\025\010\000\002\026\005\000" +
    "\002\027\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\263\000\004\072\006\001\002\000\006\002\265\072" +
    "\006\001\002\000\012\002\uffff\034\uffff\043\uffff\072\uffff" +
    "\001\002\000\070\021\021\022\050\023\031\024\047\025" +
    "\020\027\055\030\043\031\027\032\013\033\046\035\025" +
    "\036\056\037\040\040\042\041\014\045\037\050\011\051" +
    "\017\052\033\053\030\054\035\055\022\056\024\057\041" +
    "\060\012\061\016\072\015\001\002\000\014\002\ufff4\012" +
    "\260\034\ufff4\043\ufff4\072\ufff4\001\002\000\014\002\ufff7" +
    "\012\256\034\ufff7\043\ufff7\072\ufff7\001\002\000\004\065" +
    "\253\001\002\000\004\065\250\001\002\000\004\064\063" +
    "\001\002\000\004\067\245\001\002\000\004\065\242\001" +
    "\002\000\004\065\237\001\002\000\004\065\234\001\002" +
    "\000\004\063\217\001\002\000\014\063\065\064\063\072" +
    "\057\073\067\074\062\001\002\000\004\065\213\001\002" +
    "\000\012\002\ufff2\034\ufff2\043\ufff2\072\ufff2\001\002\000" +
    "\004\065\210\001\002\000\010\063\065\072\057\073\067" +
    "\001\002\000\014\002\ufff5\012\203\034\ufff5\043\ufff5\072" +
    "\ufff5\001\002\000\010\063\065\072\057\073\067\001\002" +
    "\000\004\065\160\001\002\000\004\063\154\001\002\000" +
    "\012\002\ufffe\034\ufffe\043\ufffe\072\ufffe\001\002\000\004" +
    "\065\151\001\002\000\012\002\ufffc\034\ufffc\043\ufffc\072" +
    "\ufffc\001\002\000\004\065\146\001\002\000\012\002\ufff3" +
    "\034\ufff3\043\ufff3\072\ufff3\001\002\000\012\002\uffca\034" +
    "\uffca\043\uffca\072\uffca\001\002\000\012\002\uffb7\034\uffb7" +
    "\043\uffb7\072\uffb7\001\002\000\004\065\143\001\002\000" +
    "\004\064\063\001\002\000\004\072\141\001\002\000\012" +
    "\002\ufff9\034\ufff9\043\ufff9\072\ufff9\001\002\000\012\002" +
    "\ufffd\034\ufffd\043\ufffd\072\ufffd\001\002\000\006\063\065" +
    "\064\063\001\002\000\012\002\uffc9\034\uffc9\043\uffc9\072" +
    "\uffc9\001\002\000\004\062\122\001\002\000\016\002\ufff8" +
    "\012\116\013\117\034\ufff8\043\ufff8\072\ufff8\001\002\000" +
    "\012\002\ufffb\034\ufffb\043\ufffb\072\ufffb\001\002\000\014" +
    "\002\ufff6\012\114\034\ufff6\043\ufff6\072\ufff6\001\002\000" +
    "\012\002\ufffa\034\ufffa\043\ufffa\072\ufffa\001\002\000\004" +
    "\072\110\001\002\000\014\063\065\064\063\072\057\073" +
    "\067\074\062\001\002\000\056\002\uffe7\004\uffe7\005\uffe7" +
    "\006\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7\014" +
    "\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7\030\uffe7\034\uffe7" +
    "\043\uffe7\044\uffe7\046\uffe7\047\uffe7\066\uffe7\072\uffe7\001" +
    "\002\000\056\002\uffe5\004\uffe5\005\uffe5\006\uffe5\007\uffe5" +
    "\010\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5\016" +
    "\uffe5\017\uffe5\020\uffe5\030\uffe5\034\uffe5\043\uffe5\044\uffe5" +
    "\046\uffe5\047\uffe5\066\uffe5\072\uffe5\001\002\000\016\002" +
    "\uffc3\012\uffc3\013\uffc3\034\uffc3\043\uffc3\072\uffc3\001\002" +
    "\000\016\002\uffc1\012\uffc1\013\uffc1\034\uffc1\043\uffc1\072" +
    "\uffc1\001\002\000\020\002\ufff1\011\ufff1\012\ufff1\013\ufff1" +
    "\034\ufff1\043\ufff1\072\ufff1\001\002\000\030\002\uffc2\004" +
    "\076\005\077\006\100\007\075\010\074\012\uffc2\013\uffc2" +
    "\034\uffc2\043\uffc2\072\uffc2\001\002\000\060\002\ufff0\004" +
    "\ufff0\005\ufff0\006\ufff0\007\ufff0\010\ufff0\011\ufff0\012\ufff0" +
    "\013\ufff0\014\ufff0\015\ufff0\016\ufff0\017\ufff0\020\ufff0\030" +
    "\ufff0\034\ufff0\043\ufff0\044\ufff0\046\ufff0\047\ufff0\065\070" +
    "\066\ufff0\072\ufff0\001\002\000\016\002\uffc6\012\uffc6\013" +
    "\uffc6\034\uffc6\043\uffc6\072\uffc6\001\002\000\056\002\uffe6" +
    "\004\uffe6\005\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012" +
    "\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6" +
    "\030\uffe6\034\uffe6\043\uffe6\044\uffe6\046\uffe6\047\uffe6\066" +
    "\uffe6\072\uffe6\001\002\000\010\063\065\072\057\073\067" +
    "\001\002\000\004\066\107\001\002\000\030\002\uffee\004" +
    "\076\005\077\006\100\007\075\010\074\012\073\034\uffee" +
    "\043\uffee\066\uffee\072\uffee\001\002\000\010\063\065\072" +
    "\057\073\067\001\002\000\002\001\002\000\002\001\002" +
    "\000\002\001\002\000\002\001\002\000\002\001\002\000" +
    "\056\002\uffe9\004\uffe9\005\uffe9\006\uffe9\007\uffe9\010\uffe9" +
    "\011\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017" +
    "\uffe9\020\uffe9\030\uffe9\034\uffe9\043\uffe9\044\uffe9\046\uffe9" +
    "\047\uffe9\066\uffe9\072\uffe9\001\002\000\056\002\uffea\004" +
    "\uffea\005\uffea\006\uffea\007\uffea\010\uffea\011\uffea\012\uffea" +
    "\013\uffea\014\uffea\015\uffea\016\uffea\017\uffea\020\uffea\030" +
    "\uffea\034\uffea\043\uffea\044\uffea\046\uffea\047\uffea\066\uffea" +
    "\072\uffea\001\002\000\056\002\uffe8\004\uffe8\005\uffe8\006" +
    "\uffe8\007\uffe8\010\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8" +
    "\015\uffe8\016\uffe8\017\uffe8\020\uffe8\030\uffe8\034\uffe8\043" +
    "\uffe8\044\uffe8\046\uffe8\047\uffe8\066\uffe8\072\uffe8\001\002" +
    "\000\056\002\uffec\004\uffec\005\uffec\006\uffec\007\uffec\010" +
    "\uffec\011\uffec\012\uffec\013\uffec\014\uffec\015\uffec\016\uffec" +
    "\017\uffec\020\uffec\030\uffec\034\uffec\043\uffec\044\uffec\046" +
    "\uffec\047\uffec\066\uffec\072\uffec\001\002\000\056\002\uffeb" +
    "\004\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb\012" +
    "\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb" +
    "\030\uffeb\034\uffeb\043\uffeb\044\uffeb\046\uffeb\047\uffeb\066" +
    "\uffeb\072\uffeb\001\002\000\026\002\uffed\004\076\005\077" +
    "\006\100\007\075\010\074\034\uffed\043\uffed\066\uffed\072" +
    "\uffed\001\002\000\056\002\uffef\004\uffef\005\uffef\006\uffef" +
    "\007\uffef\010\uffef\011\uffef\012\uffef\013\uffef\014\uffef\015" +
    "\uffef\016\uffef\017\uffef\020\uffef\030\uffef\034\uffef\043\uffef" +
    "\044\uffef\046\uffef\047\uffef\066\uffef\072\uffef\001\002\000" +
    "\004\072\006\001\002\000\006\043\112\072\006\001\002" +
    "\000\012\002\uffcc\034\uffcc\043\uffcc\072\uffcc\001\002\000" +
    "\012\002\001\034\001\043\001\072\001\001\002\000\014" +
    "\063\065\064\063\072\057\073\067\074\062\001\002\000" +
    "\014\002\uffbe\012\uffbe\034\uffbe\043\uffbe\072\uffbe\001\002" +
    "\000\014\063\065\064\063\072\057\073\067\074\062\001" +
    "\002\000\014\063\065\064\063\072\057\073\067\074\062" +
    "\001\002\000\016\002\uffc4\012\uffc4\013\uffc4\034\uffc4\043" +
    "\uffc4\072\uffc4\001\002\000\016\002\uffc5\012\uffc5\013\uffc5" +
    "\034\uffc5\043\uffc5\072\uffc5\001\002\000\004\063\123\001" +
    "\002\000\006\011\125\065\124\001\002\000\004\063\127" +
    "\001\002\000\010\063\065\072\057\073\067\001\002\000" +
    "\024\002\uffd9\004\076\005\077\006\100\007\075\010\074" +
    "\034\uffd9\043\uffd9\072\uffd9\001\002\000\004\066\130\001" +
    "\002\000\004\011\131\001\002\000\010\063\065\072\057" +
    "\073\067\001\002\000\024\002\uffd8\004\076\005\077\006" +
    "\100\007\075\010\074\034\uffd8\043\uffd8\072\uffd8\001\002" +
    "\000\004\011\137\001\002\000\004\011\135\001\002\000" +
    "\010\063\065\072\057\073\067\001\002\000\024\002\uffd6" +
    "\004\076\005\077\006\100\007\075\010\074\034\uffd6\043" +
    "\uffd6\072\uffd6\001\002\000\004\074\140\001\002\000\012" +
    "\002\uffd7\034\uffd7\043\uffd7\072\uffd7\001\002\000\012\002" +
    "\uffce\034\uffce\043\uffce\072\uffce\001\002\000\014\002\uffbb" +
    "\012\uffbb\034\uffbb\043\uffbb\072\uffbb\001\002\000\010\063" +
    "\065\072\057\073\067\001\002\000\016\004\076\005\077" +
    "\006\100\007\075\010\074\066\145\001\002\000\012\002" +
    "\uffdc\034\uffdc\043\uffdc\072\uffdc\001\002\000\010\063\065" +
    "\072\057\073\067\001\002\000\016\004\076\005\077\006" +
    "\100\007\075\010\074\066\150\001\002\000\012\002\uffdf" +
    "\034\uffdf\043\uffdf\072\uffdf\001\002\000\010\063\065\072" +
    "\057\073\067\001\002\000\016\004\076\005\077\006\100" +
    "\007\075\010\074\066\153\001\002\000\012\002\uffe2\034" +
    "\uffe2\043\uffe2\072\uffe2\001\002\000\004\065\155\001\002" +
    "\000\010\063\065\072\057\073\067\001\002\000\004\066" +
    "\157\001\002\000\014\002\uffba\012\uffba\034\uffba\043\uffba" +
    "\072\uffba\001\002\000\010\063\065\072\057\073\067\001" +
    "\002\000\016\004\076\005\077\006\100\007\075\010\074" +
    "\066\162\001\002\000\012\002\uffe1\034\uffe1\043\uffe1\072" +
    "\uffe1\001\002\000\034\004\076\005\077\006\100\007\075" +
    "\010\074\011\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf\020" +
    "\uffcf\030\uffcf\046\uffcf\001\002\000\020\011\173\014\165" +
    "\015\170\016\171\017\166\020\172\046\167\001\002\000" +
    "\010\063\065\072\057\073\067\001\002\000\010\063\065" +
    "\072\057\073\067\001\002\000\004\072\200\001\002\000" +
    "\010\063\065\072\057\073\067\001\002\000\010\063\065" +
    "\072\057\073\067\001\002\000\010\063\065\072\057\073" +
    "\067\001\002\000\010\063\065\072\057\073\067\001\002" +
    "\000\034\004\076\005\077\006\100\007\075\010\074\011" +
    "\uffd3\014\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3\030\uffd3" +
    "\046\uffd3\001\002\000\034\004\076\005\077\006\100\007" +
    "\075\010\074\011\uffd0\014\uffd0\015\uffd0\016\uffd0\017\uffd0" +
    "\020\uffd0\030\uffd0\046\uffd0\001\002\000\034\004\076\005" +
    "\077\006\100\007\075\010\074\011\uffd2\014\uffd2\015\uffd2" +
    "\016\uffd2\017\uffd2\020\uffd2\030\uffd2\046\uffd2\001\002\000" +
    "\034\004\076\005\077\006\100\007\075\010\074\011\uffd4" +
    "\014\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4\030\uffd4\046" +
    "\uffd4\001\002\000\012\002\uffcd\034\uffcd\043\uffcd\072\uffcd" +
    "\001\002\000\034\004\076\005\077\006\100\007\075\010" +
    "\074\011\uffd1\014\uffd1\015\uffd1\016\uffd1\017\uffd1\020\uffd1" +
    "\030\uffd1\046\uffd1\001\002\000\034\004\076\005\077\006" +
    "\100\007\075\010\074\011\uffd5\014\uffd5\015\uffd5\016\uffd5" +
    "\017\uffd5\020\uffd5\030\uffd5\046\uffd5\001\002\000\004\064" +
    "\063\001\002\000\014\002\uffbc\012\uffbc\034\uffbc\043\uffbc" +
    "\072\uffbc\001\002\000\020\011\173\014\165\015\170\016" +
    "\171\017\166\020\172\030\206\001\002\000\010\063\065" +
    "\072\057\073\067\001\002\000\012\002\uffcb\034\uffcb\043" +
    "\uffcb\072\uffcb\001\002\000\010\063\065\072\057\073\067" +
    "\001\002\000\016\004\076\005\077\006\100\007\075\010" +
    "\074\066\212\001\002\000\012\002\uffdd\034\uffdd\043\uffdd" +
    "\072\uffdd\001\002\000\010\063\065\072\057\073\067\001" +
    "\002\000\016\004\076\005\077\006\100\007\075\010\074" +
    "\066\215\001\002\000\012\002\uffde\034\uffde\043\uffde\072" +
    "\uffde\001\002\000\014\002\uffbd\012\uffbd\034\uffbd\043\uffbd" +
    "\072\uffbd\001\002\000\004\011\220\001\002\000\010\063" +
    "\065\072\057\073\067\001\002\000\016\004\076\005\077" +
    "\006\100\007\075\010\074\047\222\001\002\000\010\063" +
    "\065\072\057\073\067\001\002\000\020\004\076\005\077" +
    "\006\100\007\075\010\074\044\224\072\006\001\002\000" +
    "\010\063\065\072\057\073\067\001\002\000\006\034\226" +
    "\072\006\001\002\000\004\063\227\001\002\000\012\002" +
    "\uffc7\034\uffc7\043\uffc7\072\uffc7\001\002\000\016\004\076" +
    "\005\077\006\100\007\075\010\074\072\006\001\002\000" +
    "\006\034\232\072\006\001\002\000\004\063\233\001\002" +
    "\000\012\002\uffc8\034\uffc8\043\uffc8\072\uffc8\001\002\000" +
    "\010\063\065\072\057\073\067\001\002\000\016\004\076" +
    "\005\077\006\100\007\075\010\074\066\236\001\002\000" +
    "\012\002\uffe3\034\uffe3\043\uffe3\072\uffe3\001\002\000\010" +
    "\063\065\072\057\073\067\001\002\000\016\004\076\005" +
    "\077\006\100\007\075\010\074\066\241\001\002\000\012" +
    "\002\uffda\034\uffda\043\uffda\072\uffda\001\002\000\010\063" +
    "\065\072\057\073\067\001\002\000\016\004\076\005\077" +
    "\006\100\007\075\010\074\066\244\001\002\000\012\002" +
    "\uffe0\034\uffe0\043\uffe0\072\uffe0\001\002\000\004\070\246" +
    "\001\002\000\012\002\uffb8\034\uffb8\043\uffb8\072\uffb8\001" +
    "\002\000\014\002\uffc0\012\uffc0\034\uffc0\043\uffc0\072\uffc0" +
    "\001\002\000\010\063\065\072\057\073\067\001\002\000" +
    "\016\004\076\005\077\006\100\007\075\010\074\066\252" +
    "\001\002\000\012\002\uffdb\034\uffdb\043\uffdb\072\uffdb\001" +
    "\002\000\010\063\065\072\057\073\067\001\002\000\016" +
    "\004\076\005\077\006\100\007\075\010\074\066\255\001" +
    "\002\000\012\002\uffe4\034\uffe4\043\uffe4\072\uffe4\001\002" +
    "\000\004\064\063\001\002\000\014\002\uffbf\012\uffbf\034" +
    "\uffbf\043\uffbf\072\uffbf\001\002\000\004\063\261\001\002" +
    "\000\004\065\262\001\002\000\010\063\065\072\057\073" +
    "\067\001\002\000\004\066\264\001\002\000\014\002\uffb9" +
    "\012\uffb9\034\uffb9\043\uffb9\072\uffb9\001\002\000\004\002" +
    "\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\263\000\006\002\003\003\004\001\001\000\004\003" +
    "\112\001\001\000\002\001\001\000\034\004\031\012\044" +
    "\013\033\014\051\016\053\017\043\020\050\022\007\023" +
    "\052\024\025\025\006\026\035\027\022\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\246\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\005\060\006\057\010\063\021\215\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\006\057\010\162\015\204\001\001\000\002\001\001" +
    "\000\010\006\057\010\162\015\163\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\141\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\132\006\133\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\005\060\006\057\010\063\021\065\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\006\057" +
    "\007\070\010\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\006\057\010\105\001\001\000\004\011\104" +
    "\001\001\000\004\011\103\001\001\000\004\011\102\001" +
    "\001\000\004\011\101\001\001\000\004\011\100\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\002\110\003\004\001\001\000\004\003" +
    "\112\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\005\060\006\057\010\063\021\114\001\001\000\002\001" +
    "\001\000\012\005\060\006\057\010\063\021\120\001\001" +
    "\000\012\005\060\006\057\010\063\021\117\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\006\057\010\125\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\006\057\010\131\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\006\057\010\135" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\006\057" +
    "\010\143\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\057\010\146\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\006\057\010\151\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\006\057" +
    "\007\155\010\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\006\057\010\160\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\057\010\201\001\001\000\006\006\057\010\200" +
    "\001\001\000\002\001\001\000\006\006\057\010\176\001" +
    "\001\000\006\006\057\010\175\001\001\000\006\006\057" +
    "\010\174\001\001\000\006\006\057\010\173\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\203\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\006\057\007\206\010\071\001\001\000" +
    "\002\001\001\000\006\006\057\010\210\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\006\057\010\213\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\006\057\010\220\001\001\000" +
    "\002\001\001\000\006\006\057\010\222\001\001\000\006" +
    "\002\224\003\004\001\001\000\006\006\057\010\227\001" +
    "\001\000\004\003\112\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\002\230\003\004\001\001\000\004\003" +
    "\112\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\006\057\010\234\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\006\057\010\237\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\006\057\010\242\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\006\057\010\250\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\006\057" +
    "\010\253\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\256\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\006\057\007\262\010\071\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void report_error(String message, Object info) {
        StringBuffer m = new StringBuffer("Error");
        System.out.println("Mensaje: " + message);
        System.out.println("info: " + info.toString());
        if(info instanceof java_cup.runtime.Symbol){
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if(s.left >= 0){
                m.append(" en la linea " + (s.left + 1));
                if (s.right >= 0)
                    m.append(", y columna " + (s.right + 1));
            }
        }
        m.append(" : " + message);
        System.err.println(m);
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // randomize ::= RANDOMIZE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("randomize",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // rem ::= REM FINAL CHECK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rem",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // dim ::= dim COMA VAR_NUM L_PAR subindice R_PAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dim",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // dim ::= DIM VAR_NUM L_PAR subindice R_PAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dim",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // read ::= READ variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("read",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // read ::= read COMA variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("read",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // data ::= DATA item 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("data",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // data ::= data COMA item 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("data",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // input ::= input COMA variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("input",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // input ::= INPUT variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("input",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // item ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("item",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // item ::= expresion_num 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("item",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // item ::= variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("item",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // print ::= print PCOMA item 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // print ::= print COMA item 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // print ::= PRINT item 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // for ::= FOR VAR_NUM EQU expresion_num TO expresion_num lineas NEXT VAR_NUM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // for ::= FOR VAR_NUM EQU expresion_num TO expresion_num STEP expresion_num lineas NEXT VAR_NUM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // sentencia_control ::= END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_control",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // sentencia_control ::= STOP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_control",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // sentencia_control ::= ON expresion_condicional GOTO subindice 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_control",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // sentencia_control ::= GOSUB INT lineas RETURN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_control",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // sentencia_control ::= IF expresion_condicional THEN INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_control",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // sentencia_control ::= GOTO INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_control",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expresion_condicional ::= expresion_num 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_condicional",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expresion_condicional ::= expresion_condicional NEQ expresion_num 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_condicional",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expresion_condicional ::= expresion_condicional GT expresion_num 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_condicional",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expresion_condicional ::= expresion_condicional GE expresion_num 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_condicional",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expresion_condicional ::= expresion_condicional EQU expresion_num 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_condicional",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expresion_condicional ::= expresion_condicional LE expresion_num 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_condicional",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expresion_condicional ::= expresion_condicional LT expresion_num 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_condicional",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // asignacion ::= LET variable_numerica EQU expresion_num 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // asignacion ::= LET variable EQU STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // funcion ::= DEF FN VAR_NUM L_PAR VAR_NUM R_PAR EQU expresion_num 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // funcion ::= DEF FN VAR_NUM EQU expresion_num 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // funcion_suministrada ::= TAN L_PAR expresion_num R_PAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion_suministrada",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // funcion_suministrada ::= SQR L_PAR expresion_num R_PAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion_suministrada",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // funcion_suministrada ::= SIN L_PAR expresion_num R_PAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion_suministrada",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // funcion_suministrada ::= SGN L_PAR expresion_num R_PAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion_suministrada",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // funcion_suministrada ::= RND L_PAR expresion_num R_PAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion_suministrada",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // funcion_suministrada ::= LOG L_PAR expresion_num R_PAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion_suministrada",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // funcion_suministrada ::= INT L_PAR expresion_num R_PAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion_suministrada",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // funcion_suministrada ::= EXP L_PAR expresion_num R_PAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion_suministrada",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // funcion_suministrada ::= COS L_PAR expresion_num R_PAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion_suministrada",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // funcion_suministrada ::= ATN L_PAR expresion_num R_PAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion_suministrada",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // funcion_suministrada ::= ABS L_PAR expresion_num R_PAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion_suministrada",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expresion_num ::= variable_numerica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_num",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expresion_num ::= FLOAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_num",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expresion_num ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_num",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expresion_num ::= expresion_num POW num 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_num",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expresion_num ::= expresion_num DIV num 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_num",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expresion_num ::= expresion_num MUL num 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_num",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expresion_num ::= expresion_num SUB num 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_num",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expresion_num ::= expresion_num SUM num 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_num",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // subindice ::= expresion_num COMA expresion_num 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subindice",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // subindice ::= expresion_num 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subindice",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // variable_numerica ::= VAR_NUM L_PAR subindice R_PAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_numerica",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // variable_numerica ::= VAR_NUM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_numerica",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // variable ::= VAR_TXT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expresion ::= randomize 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expresion ::= rem 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expresion ::= dim 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expresion ::= read 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expresion ::= data 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expresion ::= input 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expresion ::= print 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expresion ::= for 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expresion ::= sentencia_control 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expresion ::= asignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expresion ::= funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expresion ::= funcion_suministrada 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // linea ::= INT expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // lineas ::= linea 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lineas",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= lineas EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // lineas ::= lineas linea 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lineas",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

