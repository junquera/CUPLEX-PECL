import java_cup.runtime.*;

parser code {:
    public void report_error(String message, Object info) {
        StringBuffer m = new StringBuffer("Error");
        System.out.println("Mensaje: " + message);
        System.out.println("info: " + info.toString());
        if(info instanceof java_cup.runtime.Symbol){
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if(s.left >= 0){
                m.append(" en la linea " + (s.left + 1));
                if (s.right >= 0)
                    m.append(", y columna " + (s.right + 1));
            }
        }
        m.append(" : " + message);
        System.err.println(m);
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }
:};

terminal POW, MUL, DIV, SUM, SUB, EQU, COMA, PCOMA,
         LT, LE, GE, GT, NEQ, DATA, DEF, DIM, END, FOR, GO,
         GOSUB, GOTO, IF, INPUT, LET, NEXT, ON, PRINT, RANDOMIZE,
         READ, REM, RESTORE, RETURN, STEP, STOP, THEN, TO, ABS, ATN,
         COS, EXP, LOG, RND, SGN, SIN, SQR, TAN, FN, VAR_NUM, VAR_TXT,
         LPAR, RPAR, FINAL, CHECK, ERROR;

terminal Integer INT;
terminal Float FLOAT;
terminal String STRING;

non terminal lineas, sentencia, variable, variable_numerica, subindice, expresion_num,  expresion_txt, num,
             funcion_suministrada, funcion, asignacion,
             expresion_condicional, sentencia_control, for, print, item,
             input, data, read, dim, rem, randomize;


lineas ::= INTEGER sentencia | INTEGER sentencia lineas;
/**
linea ::=   error NUMBER medida PUNTOCOMA {: parser.report_error("revise la sintaxis", null); :} |
            medida:m1 NUMBER:n medida:m2 PUNTOCOMA {: parser.conversion(m1.toString(), m2.toString(), n.intValue()); System.out.println(m2); :} |
            expresiones medida:m1 NUMBER:n medida:m2 PUNTOCOMA {: parser.conversion(m1.toString(), m2.toString(), n.intValue()); System.out.println(m2); :};
*/


sentencia ::= funcion_suministrada |
          funcion |
          asignacion |
          sentencia_control |
          for | prINTEGER | input |
          data | read | dim | rem |
          randomize ;

/** ES 1. **/
variable ::=    VAR_TXT
               ;

variable_numerica ::= VAR_NUM |
                      VAR_NUM LPAR subindice RPAR
                      ;

subindice ::= expresion_num |
              expresion_num COMA expresion_num
              ;


/** ES 2. **/
expresion_num ::=   num SUM expresion_num |
                    num SUB expresion_num |
                    num MUL expresion_num |
                    num DIV expresion_num |
                    num POW expresion_num |
                    INTEGER |
                    FLOAT |
                    variable_numerica
                ;

expresion_txt ::= variable |
                  STRING |
                  expresion_txt SUM variable |
                  expresion_txt SUM STRING
                  ;

/** TODO Ver como priorizar con Libro 2.2.4 Ambig√ºedad **/
/** ES 3. **/
funcion_suministrada ::=
                ABS LPAR expresion_num RPAR |
                ATN LPAR expresion_num RPAR |
                COS LPAR expresion_num RPAR |
                EXP LPAR expresion_num RPAR |
                INT LPAR expresion_num RPAR |
                LOG LPAR expresion_num RPAR |
                RND LPAR expresion_num RPAR |
                SGN LPAR expresion_num RPAR |
                SIN LPAR expresion_num RPAR |
                SQR LPAR expresion_num RPAR |
                TAN LPAR expresion_num RPAR
            ;

/** ES 4. **/
funcion ::= DEF FN VAR_NUM EQU expresion_num |
            DEF FN VAR_NUM LPAR VAR_NUM RPAR EQU expresion_num
            ;

/** ES 5. **/
asignacion ::= LET variable EQU expresion_txt |
               LET variable_numerica EQU expresion_num
               ;


/** ES 6. **/
expresion_condicional ::= expresion_condicional LT expresion_num |
                          expresion_condicional LE expresion_num |
                          expresion_condicional EQU expresion_num |
                          expresion_condicional GE expresion_num |
                          expresion_condicional GT expresion_num |
                          expresion_condicional NEQ expresion_num |
                          expresion_num;

/** ES 7. **/
sentencia_control ::= GOTO INTEGER |
                      IF expresion_condicional THEN INTEGER |
                      GOSUB INTEGER lineas RETURN /** TODO Hacer esta **/ |
                      ON expresion_condicional GOTO subindice |
                      STOP |
                      END
                      ;

/** ES 8. **/
for ::=  FOR VAR_NUM EQU expresion_num TO expresion_num STEP expresion_num
            lineas
         NEXT VAR_NUM |
         FOR VAR_NUM EQU expresion_num TO expresion_num
            lineas
         NEXT VAR_NUM
         ;

/** ES 9. **/
prINTEGER ::= PRINTEGER item |
          prINTEGER COMA item |
          prINTEGER PCOMA item
          ;

item ::= variable | expresion_num | STRING;

/** ES 10. **/
input ::= INPUT item |
          input COMA item
          ;


/** ES 11. **/
data ::= data COMA item|
         DATA item
         ;

/** ES 12. **/
read ::=    read COMA variable |
            READ variable
           ;


/** ES 13. **/
dim ::= DIM VAR_NUM LPAR subindice RPAR |
        dim COMA VAR_NUM LPAR subindice RPAR
        ;


/** ES 14. **/
rem ::= REM FINAL CHECK;


/** ES 15. **/
randomize ::= RANDOMIZE;